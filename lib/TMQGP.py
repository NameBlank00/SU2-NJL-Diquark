# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TMQGP
else:
    import _TMQGP

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TMQGP.delete_SwigPyIterator

    def value(self):
        return _TMQGP.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TMQGP.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TMQGP.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TMQGP.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TMQGP.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TMQGP.SwigPyIterator_copy(self)

    def next(self):
        return _TMQGP.SwigPyIterator_next(self)

    def __next__(self):
        return _TMQGP.SwigPyIterator___next__(self)

    def previous(self):
        return _TMQGP.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TMQGP.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TMQGP.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TMQGP.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TMQGP.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TMQGP.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TMQGP.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TMQGP.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TMQGP:
_TMQGP.SwigPyIterator_swigregister(SwigPyIterator)

import numpy as np

class vec_type(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vec_type self) -> SwigPyIterator"""
        return _TMQGP.vec_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vec_type self) -> bool"""
        return _TMQGP.vec_type___nonzero__(self)

    def __bool__(self):
        r"""__bool__(vec_type self) -> bool"""
        return _TMQGP.vec_type___bool__(self)

    def __len__(self):
        r"""__len__(vec_type self) -> std::vector< double >::size_type"""
        return _TMQGP.vec_type___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(vec_type self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vec_type"""
        return _TMQGP.vec_type___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(vec_type self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(vec_type self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, vec_type v)
        """
        return _TMQGP.vec_type___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(vec_type self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _TMQGP.vec_type___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(vec_type self, std::vector< double >::difference_type i)
        __delitem__(vec_type self, PySliceObject * slice)
        """
        return _TMQGP.vec_type___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(vec_type self, PySliceObject * slice) -> vec_type
        __getitem__(vec_type self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _TMQGP.vec_type___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(vec_type self, PySliceObject * slice, vec_type v)
        __setitem__(vec_type self, PySliceObject * slice)
        __setitem__(vec_type self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _TMQGP.vec_type___setitem__(self, *args)

    def pop(self):
        r"""pop(vec_type self) -> std::vector< double >::value_type"""
        return _TMQGP.vec_type_pop(self)

    def append(self, x):
        r"""append(vec_type self, std::vector< double >::value_type const & x)"""
        return _TMQGP.vec_type_append(self, x)

    def empty(self):
        r"""empty(vec_type self) -> bool"""
        return _TMQGP.vec_type_empty(self)

    def size(self):
        r"""size(vec_type self) -> std::vector< double >::size_type"""
        return _TMQGP.vec_type_size(self)

    def swap(self, v):
        r"""swap(vec_type self, vec_type v)"""
        return _TMQGP.vec_type_swap(self, v)

    def begin(self):
        r"""begin(vec_type self) -> std::vector< double >::iterator"""
        return _TMQGP.vec_type_begin(self)

    def end(self):
        r"""end(vec_type self) -> std::vector< double >::iterator"""
        return _TMQGP.vec_type_end(self)

    def rbegin(self):
        r"""rbegin(vec_type self) -> std::vector< double >::reverse_iterator"""
        return _TMQGP.vec_type_rbegin(self)

    def rend(self):
        r"""rend(vec_type self) -> std::vector< double >::reverse_iterator"""
        return _TMQGP.vec_type_rend(self)

    def clear(self):
        r"""clear(vec_type self)"""
        return _TMQGP.vec_type_clear(self)

    def get_allocator(self):
        r"""get_allocator(vec_type self) -> std::vector< double >::allocator_type"""
        return _TMQGP.vec_type_get_allocator(self)

    def pop_back(self):
        r"""pop_back(vec_type self)"""
        return _TMQGP.vec_type_pop_back(self)

    def erase(self, *args):
        r"""
        erase(vec_type self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vec_type self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _TMQGP.vec_type_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(vec_type self) -> vec_type
        __init__(vec_type self, vec_type other) -> vec_type
        __init__(vec_type self, std::vector< double >::size_type size) -> vec_type
        __init__(vec_type self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vec_type
        """
        _TMQGP.vec_type_swiginit(self, _TMQGP.new_vec_type(*args))

    def push_back(self, x):
        r"""push_back(vec_type self, std::vector< double >::value_type const & x)"""
        return _TMQGP.vec_type_push_back(self, x)

    def front(self):
        r"""front(vec_type self) -> std::vector< double >::value_type const &"""
        return _TMQGP.vec_type_front(self)

    def back(self):
        r"""back(vec_type self) -> std::vector< double >::value_type const &"""
        return _TMQGP.vec_type_back(self)

    def assign(self, n, x):
        r"""assign(vec_type self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _TMQGP.vec_type_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(vec_type self, std::vector< double >::size_type new_size)
        resize(vec_type self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _TMQGP.vec_type_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(vec_type self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vec_type self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _TMQGP.vec_type_insert(self, *args)

    def reserve(self, n):
        r"""reserve(vec_type self, std::vector< double >::size_type n)"""
        return _TMQGP.vec_type_reserve(self, n)

    def capacity(self):
        r"""capacity(vec_type self) -> std::vector< double >::size_type"""
        return _TMQGP.vec_type_capacity(self)
    __swig_destroy__ = _TMQGP.delete_vec_type

# Register vec_type in _TMQGP:
_TMQGP.vec_type_swigregister(vec_type)
class dval(object):
    r"""Proxy of C++ std::map< std::string,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(dval self) -> SwigPyIterator"""
        return _TMQGP.dval_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(dval self) -> bool"""
        return _TMQGP.dval___nonzero__(self)

    def __bool__(self):
        r"""__bool__(dval self) -> bool"""
        return _TMQGP.dval___bool__(self)

    def __len__(self):
        r"""__len__(dval self) -> std::map< std::string,double >::size_type"""
        return _TMQGP.dval___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(dval self, std::map< std::string,double >::key_type const & key) -> std::map< std::string,double >::mapped_type const &"""
        return _TMQGP.dval___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(dval self, std::map< std::string,double >::key_type const & key)"""
        return _TMQGP.dval___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(dval self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _TMQGP.dval_has_key(self, key)

    def keys(self):
        r"""keys(dval self) -> PyObject *"""
        return _TMQGP.dval_keys(self)

    def values(self):
        r"""values(dval self) -> PyObject *"""
        return _TMQGP.dval_values(self)

    def items(self):
        r"""items(dval self) -> PyObject *"""
        return _TMQGP.dval_items(self)

    def __contains__(self, key):
        r"""__contains__(dval self, std::map< std::string,double >::key_type const & key) -> bool"""
        return _TMQGP.dval___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(dval self) -> SwigPyIterator"""
        return _TMQGP.dval_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(dval self) -> SwigPyIterator"""
        return _TMQGP.dval_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(dval self, std::map< std::string,double >::key_type const & key)
        __setitem__(dval self, std::map< std::string,double >::key_type const & key, std::map< std::string,double >::mapped_type const & x)
        """
        return _TMQGP.dval___setitem__(self, *args)

    def asdict(self):
        r"""asdict(dval self) -> PyObject *"""
        return _TMQGP.dval_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(dval self, std::less< std::string > const & other) -> dval
        __init__(dval self) -> dval
        __init__(dval self, dval other) -> dval
        """
        _TMQGP.dval_swiginit(self, _TMQGP.new_dval(*args))

    def empty(self):
        r"""empty(dval self) -> bool"""
        return _TMQGP.dval_empty(self)

    def size(self):
        r"""size(dval self) -> std::map< std::string,double >::size_type"""
        return _TMQGP.dval_size(self)

    def swap(self, v):
        r"""swap(dval self, dval v)"""
        return _TMQGP.dval_swap(self, v)

    def begin(self):
        r"""begin(dval self) -> std::map< std::string,double >::iterator"""
        return _TMQGP.dval_begin(self)

    def end(self):
        r"""end(dval self) -> std::map< std::string,double >::iterator"""
        return _TMQGP.dval_end(self)

    def rbegin(self):
        r"""rbegin(dval self) -> std::map< std::string,double >::reverse_iterator"""
        return _TMQGP.dval_rbegin(self)

    def rend(self):
        r"""rend(dval self) -> std::map< std::string,double >::reverse_iterator"""
        return _TMQGP.dval_rend(self)

    def clear(self):
        r"""clear(dval self)"""
        return _TMQGP.dval_clear(self)

    def get_allocator(self):
        r"""get_allocator(dval self) -> std::map< std::string,double >::allocator_type"""
        return _TMQGP.dval_get_allocator(self)

    def count(self, x):
        r"""count(dval self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type"""
        return _TMQGP.dval_count(self, x)

    def erase(self, *args):
        r"""
        erase(dval self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::size_type
        erase(dval self, std::map< std::string,double >::iterator position)
        erase(dval self, std::map< std::string,double >::iterator first, std::map< std::string,double >::iterator last)
        """
        return _TMQGP.dval_erase(self, *args)

    def find(self, x):
        r"""find(dval self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _TMQGP.dval_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(dval self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _TMQGP.dval_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(dval self, std::map< std::string,double >::key_type const & x) -> std::map< std::string,double >::iterator"""
        return _TMQGP.dval_upper_bound(self, x)
    __swig_destroy__ = _TMQGP.delete_dval

# Register dval in _TMQGP:
_TMQGP.dval_swigregister(dval)
class content_type(object):
    r"""Proxy of C++ std::map< std::string,std::map< std::string,double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(content_type self) -> SwigPyIterator"""
        return _TMQGP.content_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(content_type self) -> bool"""
        return _TMQGP.content_type___nonzero__(self)

    def __bool__(self):
        r"""__bool__(content_type self) -> bool"""
        return _TMQGP.content_type___bool__(self)

    def __len__(self):
        r"""__len__(content_type self) -> std::map< std::string,std::map< std::string,double > >::size_type"""
        return _TMQGP.content_type___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & key) -> dval"""
        return _TMQGP.content_type___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & key)"""
        return _TMQGP.content_type___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & key) -> bool"""
        return _TMQGP.content_type_has_key(self, key)

    def keys(self):
        r"""keys(content_type self) -> PyObject *"""
        return _TMQGP.content_type_keys(self)

    def values(self):
        r"""values(content_type self) -> PyObject *"""
        return _TMQGP.content_type_values(self)

    def items(self):
        r"""items(content_type self) -> PyObject *"""
        return _TMQGP.content_type_items(self)

    def __contains__(self, key):
        r"""__contains__(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & key) -> bool"""
        return _TMQGP.content_type___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(content_type self) -> SwigPyIterator"""
        return _TMQGP.content_type_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(content_type self) -> SwigPyIterator"""
        return _TMQGP.content_type_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & key)
        __setitem__(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & key, dval x)
        """
        return _TMQGP.content_type___setitem__(self, *args)

    def asdict(self):
        r"""asdict(content_type self) -> PyObject *"""
        return _TMQGP.content_type_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(content_type self, std::less< std::string > const & other) -> content_type
        __init__(content_type self) -> content_type
        __init__(content_type self, content_type other) -> content_type
        """
        _TMQGP.content_type_swiginit(self, _TMQGP.new_content_type(*args))

    def empty(self):
        r"""empty(content_type self) -> bool"""
        return _TMQGP.content_type_empty(self)

    def size(self):
        r"""size(content_type self) -> std::map< std::string,std::map< std::string,double > >::size_type"""
        return _TMQGP.content_type_size(self)

    def swap(self, v):
        r"""swap(content_type self, content_type v)"""
        return _TMQGP.content_type_swap(self, v)

    def begin(self):
        r"""begin(content_type self) -> std::map< std::string,std::map< std::string,double > >::iterator"""
        return _TMQGP.content_type_begin(self)

    def end(self):
        r"""end(content_type self) -> std::map< std::string,std::map< std::string,double > >::iterator"""
        return _TMQGP.content_type_end(self)

    def rbegin(self):
        r"""rbegin(content_type self) -> std::map< std::string,std::map< std::string,double > >::reverse_iterator"""
        return _TMQGP.content_type_rbegin(self)

    def rend(self):
        r"""rend(content_type self) -> std::map< std::string,std::map< std::string,double > >::reverse_iterator"""
        return _TMQGP.content_type_rend(self)

    def clear(self):
        r"""clear(content_type self)"""
        return _TMQGP.content_type_clear(self)

    def get_allocator(self):
        r"""get_allocator(content_type self) -> std::map< std::string,std::map< std::string,double > >::allocator_type"""
        return _TMQGP.content_type_get_allocator(self)

    def count(self, x):
        r"""count(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & x) -> std::map< std::string,std::map< std::string,double > >::size_type"""
        return _TMQGP.content_type_count(self, x)

    def erase(self, *args):
        r"""
        erase(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & x) -> std::map< std::string,std::map< std::string,double > >::size_type
        erase(content_type self, std::map< std::string,std::map< std::string,double > >::iterator position)
        erase(content_type self, std::map< std::string,std::map< std::string,double > >::iterator first, std::map< std::string,std::map< std::string,double > >::iterator last)
        """
        return _TMQGP.content_type_erase(self, *args)

    def find(self, x):
        r"""find(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & x) -> std::map< std::string,std::map< std::string,double > >::iterator"""
        return _TMQGP.content_type_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & x) -> std::map< std::string,std::map< std::string,double > >::iterator"""
        return _TMQGP.content_type_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(content_type self, std::map< std::string,std::map< std::string,double > >::key_type const & x) -> std::map< std::string,std::map< std::string,double > >::iterator"""
        return _TMQGP.content_type_upper_bound(self, x)
    __swig_destroy__ = _TMQGP.delete_content_type

# Register content_type in _TMQGP:
_TMQGP.content_type_swigregister(content_type)
class str_vector(object):
    r"""Proxy of C++ std::vector< std::string > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(str_vector self) -> SwigPyIterator"""
        return _TMQGP.str_vector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(str_vector self) -> bool"""
        return _TMQGP.str_vector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(str_vector self) -> bool"""
        return _TMQGP.str_vector___bool__(self)

    def __len__(self):
        r"""__len__(str_vector self) -> std::vector< std::string >::size_type"""
        return _TMQGP.str_vector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(str_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> str_vector"""
        return _TMQGP.str_vector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(str_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        __setslice__(str_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, str_vector v)
        """
        return _TMQGP.str_vector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(str_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _TMQGP.str_vector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(str_vector self, std::vector< std::string >::difference_type i)
        __delitem__(str_vector self, PySliceObject * slice)
        """
        return _TMQGP.str_vector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(str_vector self, PySliceObject * slice) -> str_vector
        __getitem__(str_vector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _TMQGP.str_vector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(str_vector self, PySliceObject * slice, str_vector v)
        __setitem__(str_vector self, PySliceObject * slice)
        __setitem__(str_vector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _TMQGP.str_vector___setitem__(self, *args)

    def pop(self):
        r"""pop(str_vector self) -> std::vector< std::string >::value_type"""
        return _TMQGP.str_vector_pop(self)

    def append(self, x):
        r"""append(str_vector self, std::vector< std::string >::value_type const & x)"""
        return _TMQGP.str_vector_append(self, x)

    def empty(self):
        r"""empty(str_vector self) -> bool"""
        return _TMQGP.str_vector_empty(self)

    def size(self):
        r"""size(str_vector self) -> std::vector< std::string >::size_type"""
        return _TMQGP.str_vector_size(self)

    def swap(self, v):
        r"""swap(str_vector self, str_vector v)"""
        return _TMQGP.str_vector_swap(self, v)

    def begin(self):
        r"""begin(str_vector self) -> std::vector< std::string >::iterator"""
        return _TMQGP.str_vector_begin(self)

    def end(self):
        r"""end(str_vector self) -> std::vector< std::string >::iterator"""
        return _TMQGP.str_vector_end(self)

    def rbegin(self):
        r"""rbegin(str_vector self) -> std::vector< std::string >::reverse_iterator"""
        return _TMQGP.str_vector_rbegin(self)

    def rend(self):
        r"""rend(str_vector self) -> std::vector< std::string >::reverse_iterator"""
        return _TMQGP.str_vector_rend(self)

    def clear(self):
        r"""clear(str_vector self)"""
        return _TMQGP.str_vector_clear(self)

    def get_allocator(self):
        r"""get_allocator(str_vector self) -> std::vector< std::string >::allocator_type"""
        return _TMQGP.str_vector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(str_vector self)"""
        return _TMQGP.str_vector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(str_vector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(str_vector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _TMQGP.str_vector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(str_vector self) -> str_vector
        __init__(str_vector self, str_vector other) -> str_vector
        __init__(str_vector self, std::vector< std::string >::size_type size) -> str_vector
        __init__(str_vector self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> str_vector
        """
        _TMQGP.str_vector_swiginit(self, _TMQGP.new_str_vector(*args))

    def push_back(self, x):
        r"""push_back(str_vector self, std::vector< std::string >::value_type const & x)"""
        return _TMQGP.str_vector_push_back(self, x)

    def front(self):
        r"""front(str_vector self) -> std::vector< std::string >::value_type const &"""
        return _TMQGP.str_vector_front(self)

    def back(self):
        r"""back(str_vector self) -> std::vector< std::string >::value_type const &"""
        return _TMQGP.str_vector_back(self)

    def assign(self, n, x):
        r"""assign(str_vector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _TMQGP.str_vector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(str_vector self, std::vector< std::string >::size_type new_size)
        resize(str_vector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _TMQGP.str_vector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(str_vector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(str_vector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)
        """
        return _TMQGP.str_vector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(str_vector self, std::vector< std::string >::size_type n)"""
        return _TMQGP.str_vector_reserve(self, n)

    def capacity(self):
        r"""capacity(str_vector self) -> std::vector< std::string >::size_type"""
        return _TMQGP.str_vector_capacity(self)
    __swig_destroy__ = _TMQGP.delete_str_vector

# Register str_vector in _TMQGP:
_TMQGP.str_vector_swigregister(str_vector)
class suppress_type(object):
    r"""Proxy of C++ std::map< std::string,int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(suppress_type self) -> SwigPyIterator"""
        return _TMQGP.suppress_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(suppress_type self) -> bool"""
        return _TMQGP.suppress_type___nonzero__(self)

    def __bool__(self):
        r"""__bool__(suppress_type self) -> bool"""
        return _TMQGP.suppress_type___bool__(self)

    def __len__(self):
        r"""__len__(suppress_type self) -> std::map< std::string,int >::size_type"""
        return _TMQGP.suppress_type___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(suppress_type self, std::map< std::string,int >::key_type const & key) -> std::map< std::string,int >::mapped_type const &"""
        return _TMQGP.suppress_type___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(suppress_type self, std::map< std::string,int >::key_type const & key)"""
        return _TMQGP.suppress_type___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(suppress_type self, std::map< std::string,int >::key_type const & key) -> bool"""
        return _TMQGP.suppress_type_has_key(self, key)

    def keys(self):
        r"""keys(suppress_type self) -> PyObject *"""
        return _TMQGP.suppress_type_keys(self)

    def values(self):
        r"""values(suppress_type self) -> PyObject *"""
        return _TMQGP.suppress_type_values(self)

    def items(self):
        r"""items(suppress_type self) -> PyObject *"""
        return _TMQGP.suppress_type_items(self)

    def __contains__(self, key):
        r"""__contains__(suppress_type self, std::map< std::string,int >::key_type const & key) -> bool"""
        return _TMQGP.suppress_type___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(suppress_type self) -> SwigPyIterator"""
        return _TMQGP.suppress_type_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(suppress_type self) -> SwigPyIterator"""
        return _TMQGP.suppress_type_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(suppress_type self, std::map< std::string,int >::key_type const & key)
        __setitem__(suppress_type self, std::map< std::string,int >::key_type const & key, std::map< std::string,int >::mapped_type const & x)
        """
        return _TMQGP.suppress_type___setitem__(self, *args)

    def asdict(self):
        r"""asdict(suppress_type self) -> PyObject *"""
        return _TMQGP.suppress_type_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(suppress_type self, std::less< std::string > const & other) -> suppress_type
        __init__(suppress_type self) -> suppress_type
        __init__(suppress_type self, suppress_type other) -> suppress_type
        """
        _TMQGP.suppress_type_swiginit(self, _TMQGP.new_suppress_type(*args))

    def empty(self):
        r"""empty(suppress_type self) -> bool"""
        return _TMQGP.suppress_type_empty(self)

    def size(self):
        r"""size(suppress_type self) -> std::map< std::string,int >::size_type"""
        return _TMQGP.suppress_type_size(self)

    def swap(self, v):
        r"""swap(suppress_type self, suppress_type v)"""
        return _TMQGP.suppress_type_swap(self, v)

    def begin(self):
        r"""begin(suppress_type self) -> std::map< std::string,int >::iterator"""
        return _TMQGP.suppress_type_begin(self)

    def end(self):
        r"""end(suppress_type self) -> std::map< std::string,int >::iterator"""
        return _TMQGP.suppress_type_end(self)

    def rbegin(self):
        r"""rbegin(suppress_type self) -> std::map< std::string,int >::reverse_iterator"""
        return _TMQGP.suppress_type_rbegin(self)

    def rend(self):
        r"""rend(suppress_type self) -> std::map< std::string,int >::reverse_iterator"""
        return _TMQGP.suppress_type_rend(self)

    def clear(self):
        r"""clear(suppress_type self)"""
        return _TMQGP.suppress_type_clear(self)

    def get_allocator(self):
        r"""get_allocator(suppress_type self) -> std::map< std::string,int >::allocator_type"""
        return _TMQGP.suppress_type_get_allocator(self)

    def count(self, x):
        r"""count(suppress_type self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type"""
        return _TMQGP.suppress_type_count(self, x)

    def erase(self, *args):
        r"""
        erase(suppress_type self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::size_type
        erase(suppress_type self, std::map< std::string,int >::iterator position)
        erase(suppress_type self, std::map< std::string,int >::iterator first, std::map< std::string,int >::iterator last)
        """
        return _TMQGP.suppress_type_erase(self, *args)

    def find(self, x):
        r"""find(suppress_type self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _TMQGP.suppress_type_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(suppress_type self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _TMQGP.suppress_type_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(suppress_type self, std::map< std::string,int >::key_type const & x) -> std::map< std::string,int >::iterator"""
        return _TMQGP.suppress_type_upper_bound(self, x)
    __swig_destroy__ = _TMQGP.delete_suppress_type

# Register suppress_type in _TMQGP:
_TMQGP.suppress_type_swigregister(suppress_type)
class eos_type(object):
    r"""Proxy of C++ std::map< std::string,std::vector< double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(eos_type self) -> SwigPyIterator"""
        return _TMQGP.eos_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(eos_type self) -> bool"""
        return _TMQGP.eos_type___nonzero__(self)

    def __bool__(self):
        r"""__bool__(eos_type self) -> bool"""
        return _TMQGP.eos_type___bool__(self)

    def __len__(self):
        r"""__len__(eos_type self) -> std::map< std::string,std::vector< double > >::size_type"""
        return _TMQGP.eos_type___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(eos_type self, std::map< std::string,std::vector< double > >::key_type const & key) -> vec_type"""
        return _TMQGP.eos_type___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(eos_type self, std::map< std::string,std::vector< double > >::key_type const & key)"""
        return _TMQGP.eos_type___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(eos_type self, std::map< std::string,std::vector< double > >::key_type const & key) -> bool"""
        return _TMQGP.eos_type_has_key(self, key)

    def keys(self):
        r"""keys(eos_type self) -> PyObject *"""
        return _TMQGP.eos_type_keys(self)

    def values(self):
        r"""values(eos_type self) -> PyObject *"""
        return _TMQGP.eos_type_values(self)

    def items(self):
        r"""items(eos_type self) -> PyObject *"""
        return _TMQGP.eos_type_items(self)

    def __contains__(self, key):
        r"""__contains__(eos_type self, std::map< std::string,std::vector< double > >::key_type const & key) -> bool"""
        return _TMQGP.eos_type___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(eos_type self) -> SwigPyIterator"""
        return _TMQGP.eos_type_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(eos_type self) -> SwigPyIterator"""
        return _TMQGP.eos_type_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(eos_type self, std::map< std::string,std::vector< double > >::key_type const & key)
        __setitem__(eos_type self, std::map< std::string,std::vector< double > >::key_type const & key, vec_type x)
        """
        return _TMQGP.eos_type___setitem__(self, *args)

    def asdict(self):
        r"""asdict(eos_type self) -> PyObject *"""
        return _TMQGP.eos_type_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(eos_type self, std::less< std::string > const & other) -> eos_type
        __init__(eos_type self) -> eos_type
        __init__(eos_type self, eos_type other) -> eos_type
        """
        _TMQGP.eos_type_swiginit(self, _TMQGP.new_eos_type(*args))

    def empty(self):
        r"""empty(eos_type self) -> bool"""
        return _TMQGP.eos_type_empty(self)

    def size(self):
        r"""size(eos_type self) -> std::map< std::string,std::vector< double > >::size_type"""
        return _TMQGP.eos_type_size(self)

    def swap(self, v):
        r"""swap(eos_type self, eos_type v)"""
        return _TMQGP.eos_type_swap(self, v)

    def begin(self):
        r"""begin(eos_type self) -> std::map< std::string,std::vector< double > >::iterator"""
        return _TMQGP.eos_type_begin(self)

    def end(self):
        r"""end(eos_type self) -> std::map< std::string,std::vector< double > >::iterator"""
        return _TMQGP.eos_type_end(self)

    def rbegin(self):
        r"""rbegin(eos_type self) -> std::map< std::string,std::vector< double > >::reverse_iterator"""
        return _TMQGP.eos_type_rbegin(self)

    def rend(self):
        r"""rend(eos_type self) -> std::map< std::string,std::vector< double > >::reverse_iterator"""
        return _TMQGP.eos_type_rend(self)

    def clear(self):
        r"""clear(eos_type self)"""
        return _TMQGP.eos_type_clear(self)

    def get_allocator(self):
        r"""get_allocator(eos_type self) -> std::map< std::string,std::vector< double > >::allocator_type"""
        return _TMQGP.eos_type_get_allocator(self)

    def count(self, x):
        r"""count(eos_type self, std::map< std::string,std::vector< double > >::key_type const & x) -> std::map< std::string,std::vector< double > >::size_type"""
        return _TMQGP.eos_type_count(self, x)

    def erase(self, *args):
        r"""
        erase(eos_type self, std::map< std::string,std::vector< double > >::key_type const & x) -> std::map< std::string,std::vector< double > >::size_type
        erase(eos_type self, std::map< std::string,std::vector< double > >::iterator position)
        erase(eos_type self, std::map< std::string,std::vector< double > >::iterator first, std::map< std::string,std::vector< double > >::iterator last)
        """
        return _TMQGP.eos_type_erase(self, *args)

    def find(self, x):
        r"""find(eos_type self, std::map< std::string,std::vector< double > >::key_type const & x) -> std::map< std::string,std::vector< double > >::iterator"""
        return _TMQGP.eos_type_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(eos_type self, std::map< std::string,std::vector< double > >::key_type const & x) -> std::map< std::string,std::vector< double > >::iterator"""
        return _TMQGP.eos_type_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(eos_type self, std::map< std::string,std::vector< double > >::key_type const & x) -> std::map< std::string,std::vector< double > >::iterator"""
        return _TMQGP.eos_type_upper_bound(self, x)
    __swig_destroy__ = _TMQGP.delete_eos_type

# Register eos_type in _TMQGP:
_TMQGP.eos_type_swigregister(eos_type)
class mr_type(object):
    r"""Proxy of C++ std::vector< std::map< std::string,double > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(mr_type self) -> SwigPyIterator"""
        return _TMQGP.mr_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(mr_type self) -> bool"""
        return _TMQGP.mr_type___nonzero__(self)

    def __bool__(self):
        r"""__bool__(mr_type self) -> bool"""
        return _TMQGP.mr_type___bool__(self)

    def __len__(self):
        r"""__len__(mr_type self) -> std::vector< std::map< std::string,double > >::size_type"""
        return _TMQGP.mr_type___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i, std::vector< std::map< std::string,double > >::difference_type j) -> mr_type"""
        return _TMQGP.mr_type___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i, std::vector< std::map< std::string,double > >::difference_type j)
        __setslice__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i, std::vector< std::map< std::string,double > >::difference_type j, mr_type v)
        """
        return _TMQGP.mr_type___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i, std::vector< std::map< std::string,double > >::difference_type j)"""
        return _TMQGP.mr_type___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i)
        __delitem__(mr_type self, PySliceObject * slice)
        """
        return _TMQGP.mr_type___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(mr_type self, PySliceObject * slice) -> mr_type
        __getitem__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i) -> dval
        """
        return _TMQGP.mr_type___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(mr_type self, PySliceObject * slice, mr_type v)
        __setitem__(mr_type self, PySliceObject * slice)
        __setitem__(mr_type self, std::vector< std::map< std::string,double > >::difference_type i, dval x)
        """
        return _TMQGP.mr_type___setitem__(self, *args)

    def pop(self):
        r"""pop(mr_type self) -> dval"""
        return _TMQGP.mr_type_pop(self)

    def append(self, x):
        r"""append(mr_type self, dval x)"""
        return _TMQGP.mr_type_append(self, x)

    def empty(self):
        r"""empty(mr_type self) -> bool"""
        return _TMQGP.mr_type_empty(self)

    def size(self):
        r"""size(mr_type self) -> std::vector< std::map< std::string,double > >::size_type"""
        return _TMQGP.mr_type_size(self)

    def swap(self, v):
        r"""swap(mr_type self, mr_type v)"""
        return _TMQGP.mr_type_swap(self, v)

    def begin(self):
        r"""begin(mr_type self) -> std::vector< std::map< std::string,double > >::iterator"""
        return _TMQGP.mr_type_begin(self)

    def end(self):
        r"""end(mr_type self) -> std::vector< std::map< std::string,double > >::iterator"""
        return _TMQGP.mr_type_end(self)

    def rbegin(self):
        r"""rbegin(mr_type self) -> std::vector< std::map< std::string,double > >::reverse_iterator"""
        return _TMQGP.mr_type_rbegin(self)

    def rend(self):
        r"""rend(mr_type self) -> std::vector< std::map< std::string,double > >::reverse_iterator"""
        return _TMQGP.mr_type_rend(self)

    def clear(self):
        r"""clear(mr_type self)"""
        return _TMQGP.mr_type_clear(self)

    def get_allocator(self):
        r"""get_allocator(mr_type self) -> std::vector< std::map< std::string,double > >::allocator_type"""
        return _TMQGP.mr_type_get_allocator(self)

    def pop_back(self):
        r"""pop_back(mr_type self)"""
        return _TMQGP.mr_type_pop_back(self)

    def erase(self, *args):
        r"""
        erase(mr_type self, std::vector< std::map< std::string,double > >::iterator pos) -> std::vector< std::map< std::string,double > >::iterator
        erase(mr_type self, std::vector< std::map< std::string,double > >::iterator first, std::vector< std::map< std::string,double > >::iterator last) -> std::vector< std::map< std::string,double > >::iterator
        """
        return _TMQGP.mr_type_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(mr_type self) -> mr_type
        __init__(mr_type self, mr_type other) -> mr_type
        __init__(mr_type self, std::vector< std::map< std::string,double > >::size_type size) -> mr_type
        __init__(mr_type self, std::vector< std::map< std::string,double > >::size_type size, dval value) -> mr_type
        """
        _TMQGP.mr_type_swiginit(self, _TMQGP.new_mr_type(*args))

    def push_back(self, x):
        r"""push_back(mr_type self, dval x)"""
        return _TMQGP.mr_type_push_back(self, x)

    def front(self):
        r"""front(mr_type self) -> dval"""
        return _TMQGP.mr_type_front(self)

    def back(self):
        r"""back(mr_type self) -> dval"""
        return _TMQGP.mr_type_back(self)

    def assign(self, n, x):
        r"""assign(mr_type self, std::vector< std::map< std::string,double > >::size_type n, dval x)"""
        return _TMQGP.mr_type_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(mr_type self, std::vector< std::map< std::string,double > >::size_type new_size)
        resize(mr_type self, std::vector< std::map< std::string,double > >::size_type new_size, dval x)
        """
        return _TMQGP.mr_type_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(mr_type self, std::vector< std::map< std::string,double > >::iterator pos, dval x) -> std::vector< std::map< std::string,double > >::iterator
        insert(mr_type self, std::vector< std::map< std::string,double > >::iterator pos, std::vector< std::map< std::string,double > >::size_type n, dval x)
        """
        return _TMQGP.mr_type_insert(self, *args)

    def reserve(self, n):
        r"""reserve(mr_type self, std::vector< std::map< std::string,double > >::size_type n)"""
        return _TMQGP.mr_type_reserve(self, n)

    def capacity(self):
        r"""capacity(mr_type self) -> std::vector< std::map< std::string,double > >::size_type"""
        return _TMQGP.mr_type_capacity(self)
    __swig_destroy__ = _TMQGP.delete_mr_type

# Register mr_type in _TMQGP:
_TMQGP.mr_type_swigregister(mr_type)
class integfunc_type(object):
    r"""Proxy of C++ std::map< std::string,std::function< double (double,double const []) > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(integfunc_type self) -> SwigPyIterator"""
        return _TMQGP.integfunc_type_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(integfunc_type self) -> bool"""
        return _TMQGP.integfunc_type___nonzero__(self)

    def __bool__(self):
        r"""__bool__(integfunc_type self) -> bool"""
        return _TMQGP.integfunc_type___bool__(self)

    def __len__(self):
        r"""__len__(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::size_type"""
        return _TMQGP.integfunc_type___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & key) -> std::map< std::string,std::function< double (double,double const []) > >::mapped_type const &"""
        return _TMQGP.integfunc_type___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & key)"""
        return _TMQGP.integfunc_type___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & key) -> bool"""
        return _TMQGP.integfunc_type_has_key(self, key)

    def keys(self):
        r"""keys(integfunc_type self) -> PyObject *"""
        return _TMQGP.integfunc_type_keys(self)

    def values(self):
        r"""values(integfunc_type self) -> PyObject *"""
        return _TMQGP.integfunc_type_values(self)

    def items(self):
        r"""items(integfunc_type self) -> PyObject *"""
        return _TMQGP.integfunc_type_items(self)

    def __contains__(self, key):
        r"""__contains__(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & key) -> bool"""
        return _TMQGP.integfunc_type___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(integfunc_type self) -> SwigPyIterator"""
        return _TMQGP.integfunc_type_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(integfunc_type self) -> SwigPyIterator"""
        return _TMQGP.integfunc_type_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & key)
        __setitem__(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & key, std::map< std::string,std::function< double (double,double const []) > >::mapped_type const & x)
        """
        return _TMQGP.integfunc_type___setitem__(self, *args)

    def asdict(self):
        r"""asdict(integfunc_type self) -> PyObject *"""
        return _TMQGP.integfunc_type_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(integfunc_type self, std::less< std::string > const & other) -> integfunc_type
        __init__(integfunc_type self) -> integfunc_type
        __init__(integfunc_type self, integfunc_type other) -> integfunc_type
        """
        _TMQGP.integfunc_type_swiginit(self, _TMQGP.new_integfunc_type(*args))

    def empty(self):
        r"""empty(integfunc_type self) -> bool"""
        return _TMQGP.integfunc_type_empty(self)

    def size(self):
        r"""size(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::size_type"""
        return _TMQGP.integfunc_type_size(self)

    def swap(self, v):
        r"""swap(integfunc_type self, integfunc_type v)"""
        return _TMQGP.integfunc_type_swap(self, v)

    def begin(self):
        r"""begin(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::iterator"""
        return _TMQGP.integfunc_type_begin(self)

    def end(self):
        r"""end(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::iterator"""
        return _TMQGP.integfunc_type_end(self)

    def rbegin(self):
        r"""rbegin(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::reverse_iterator"""
        return _TMQGP.integfunc_type_rbegin(self)

    def rend(self):
        r"""rend(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::reverse_iterator"""
        return _TMQGP.integfunc_type_rend(self)

    def clear(self):
        r"""clear(integfunc_type self)"""
        return _TMQGP.integfunc_type_clear(self)

    def get_allocator(self):
        r"""get_allocator(integfunc_type self) -> std::map< std::string,std::function< double (double,double const []) > >::allocator_type"""
        return _TMQGP.integfunc_type_get_allocator(self)

    def count(self, x):
        r"""count(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & x) -> std::map< std::string,std::function< double (double,double const []) > >::size_type"""
        return _TMQGP.integfunc_type_count(self, x)

    def erase(self, *args):
        r"""
        erase(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & x) -> std::map< std::string,std::function< double (double,double const []) > >::size_type
        erase(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::iterator position)
        erase(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::iterator first, std::map< std::string,std::function< double (double,double const []) > >::iterator last)
        """
        return _TMQGP.integfunc_type_erase(self, *args)

    def find(self, x):
        r"""find(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & x) -> std::map< std::string,std::function< double (double,double const []) > >::iterator"""
        return _TMQGP.integfunc_type_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & x) -> std::map< std::string,std::function< double (double,double const []) > >::iterator"""
        return _TMQGP.integfunc_type_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(integfunc_type self, std::map< std::string,std::function< double (double,double const []) > >::key_type const & x) -> std::map< std::string,std::function< double (double,double const []) > >::iterator"""
        return _TMQGP.integfunc_type_upper_bound(self, x)
    __swig_destroy__ = _TMQGP.delete_integfunc_type

# Register integfunc_type in _TMQGP:
_TMQGP.integfunc_type_swigregister(integfunc_type)
class Functor(object):
    r"""Proxy of C++ std::function< double (double) > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2):
        r"""__init__(Functor self, Functor arg2) -> Functor"""
        _TMQGP.Functor_swiginit(self, _TMQGP.new_Functor(arg2))

    def __call__(self, arg2):
        r"""__call__(Functor self, double arg2) -> double"""
        return _TMQGP.Functor___call__(self, arg2)
    __swig_destroy__ = _TMQGP.delete_Functor

# Register Functor in _TMQGP:
_TMQGP.Functor_swigregister(Functor)
class Interpolator(object):
    r"""Proxy of C++ Interpolator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Interpolator self, double * x, double * y, std::string kind) -> Interpolator
        __init__(Interpolator self) -> Interpolator
        """
        _TMQGP.Interpolator_swiginit(self, _TMQGP.new_Interpolator(*args))
    __swig_destroy__ = _TMQGP.delete_Interpolator
    interp = property(_TMQGP.Interpolator_interp_get, _TMQGP.Interpolator_interp_set, doc=r"""interp : p.gsl_spline""")
    accel = property(_TMQGP.Interpolator_accel_get, _TMQGP.Interpolator_accel_set, doc=r"""accel : p.gsl_interp_accel""")
    methods = property(_TMQGP.Interpolator_methods_get, _TMQGP.Interpolator_methods_set, doc=r"""methods : std::map<(std::string,p.q(const).gsl_interp_type)>""")
    x = property(_TMQGP.Interpolator_x_get, _TMQGP.Interpolator_x_set, doc=r"""x : std::vector<(double)>""")
    data = property(_TMQGP.Interpolator_data_get, _TMQGP.Interpolator_data_set, doc=r"""data : std::vector<(double)>""")
    kind = property(_TMQGP.Interpolator_kind_get, _TMQGP.Interpolator_kind_set, doc=r"""kind : std::string""")

    def __call__(self, x):
        r"""__call__(Interpolator self, double x) -> double"""
        return _TMQGP.Interpolator___call__(self, x)

    def D(self, x):
        r"""D(Interpolator self, double x) -> double"""
        return _TMQGP.Interpolator_D(self, x)

    def __getstate__(self):
        x = list(self.x)
        data = list(self.data)
        return x, data, self.kind

    def __setstate__(self, state):
        x, data, kind = state
        self.__init__(np.array(x), np.array(data), kind)


# Register Interpolator in _TMQGP:
_TMQGP.Interpolator_swigregister(Interpolator)
class Interpolator2D(object):
    r"""Proxy of C++ Interpolator2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Interpolator2D self) -> Interpolator2D
        __init__(Interpolator2D self, double * x, double * y, double * z2) -> Interpolator2D
        """
        _TMQGP.Interpolator2D_swiginit(self, _TMQGP.new_Interpolator2D(*args))
    __swig_destroy__ = _TMQGP.delete_Interpolator2D
    interp = property(_TMQGP.Interpolator2D_interp_get, _TMQGP.Interpolator2D_interp_set, doc=r"""interp : p.gsl_spline2d""")
    accX = property(_TMQGP.Interpolator2D_accX_get, _TMQGP.Interpolator2D_accX_set, doc=r"""accX : p.gsl_interp_accel""")
    accY = property(_TMQGP.Interpolator2D_accY_get, _TMQGP.Interpolator2D_accY_set, doc=r"""accY : p.gsl_interp_accel""")
    debug = property(_TMQGP.Interpolator2D_debug_get, _TMQGP.Interpolator2D_debug_set, doc=r"""debug : bool""")
    x = property(_TMQGP.Interpolator2D_x_get, _TMQGP.Interpolator2D_x_set, doc=r"""x : std::vector<(double)>""")
    y = property(_TMQGP.Interpolator2D_y_get, _TMQGP.Interpolator2D_y_set, doc=r"""y : std::vector<(double)>""")
    z = property(_TMQGP.Interpolator2D_z_get, _TMQGP.Interpolator2D_z_set, doc=r"""z : std::vector<(double)>""")

    def __call__(self, x, y):
        r"""__call__(Interpolator2D self, double x, double y) -> double"""
        return _TMQGP.Interpolator2D___call__(self, x, y)

    def __getstate__(self):
        x = list(self.x)
        y = list(self.y)
        z = list(self.z)
        return x, y, z

    def __setstate__(self, state):
        _x, _y, _z = state
        x = np.array(_x)
        y = np.array(_y)
        z = np.array(_z).reshape(len(y), len(x))
        self.__init__(x, y, z)


# Register Interpolator2D in _TMQGP:
_TMQGP.Interpolator2D_swigregister(Interpolator2D)
class Interpolator2DLog(Interpolator2D):
    r"""Proxy of C++ Interpolator2DLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Interpolator2DLog self) -> Interpolator2DLog
        __init__(Interpolator2DLog self, double * x, double * y, double * z2) -> Interpolator2DLog
        """
        _TMQGP.Interpolator2DLog_swiginit(self, _TMQGP.new_Interpolator2DLog(*args))

    def __call__(self, x, y):
        r"""__call__(Interpolator2DLog self, double x, double y) -> double"""
        return _TMQGP.Interpolator2DLog___call__(self, x, y)
    __swig_destroy__ = _TMQGP.delete_Interpolator2DLog

# Register Interpolator2DLog in _TMQGP:
_TMQGP.Interpolator2DLog_swigregister(Interpolator2DLog)
class Interpolator2D_cubic(Interpolator2D):
    r"""Proxy of C++ Interpolator2D_cubic class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(Interpolator2D_cubic self) -> Interpolator2D_cubic
        __init__(Interpolator2D_cubic self, double * x, double * y, double * z2) -> Interpolator2D_cubic
        """
        _TMQGP.Interpolator2D_cubic_swiginit(self, _TMQGP.new_Interpolator2D_cubic(*args))
    __swig_destroy__ = _TMQGP.delete_Interpolator2D_cubic

# Register Interpolator2D_cubic in _TMQGP:
_TMQGP.Interpolator2D_cubic_swigregister(Interpolator2D_cubic)
class InterDenom2D(Interpolator2D):
    r"""Proxy of C++ InterDenom2D class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(InterDenom2D self) -> InterDenom2D
        __init__(InterDenom2D self, double * x, double * y, double * ReZ2, double * ImZ2, std::string what) -> InterDenom2D
        """
        _TMQGP.InterDenom2D_swiginit(self, _TMQGP.new_InterDenom2D(*args))
    __swig_destroy__ = _TMQGP.delete_InterDenom2D
    accImX = property(_TMQGP.InterDenom2D_accImX_get, _TMQGP.InterDenom2D_accImX_set, doc=r"""accImX : p.gsl_interp_accel""")
    accImY = property(_TMQGP.InterDenom2D_accImY_get, _TMQGP.InterDenom2D_accImY_set, doc=r"""accImY : p.gsl_interp_accel""")
    iIm = property(_TMQGP.InterDenom2D_iIm_get, _TMQGP.InterDenom2D_iIm_set, doc=r"""iIm : p.gsl_spline2d""")
    z2 = property(_TMQGP.InterDenom2D_z2_get, _TMQGP.InterDenom2D_z2_set, doc=r"""z2 : std::vector<(double)>""")
    what = property(_TMQGP.InterDenom2D_what_get, _TMQGP.InterDenom2D_what_set, doc=r"""what : std::string""")

    def real(self, x, y):
        r"""real(InterDenom2D self, double x, double y) -> double"""
        return _TMQGP.InterDenom2D_real(self, x, y)

    def imag(self, x, y):
        r"""imag(InterDenom2D self, double x, double y) -> double"""
        return _TMQGP.InterDenom2D_imag(self, x, y)

    def __call__(self, x, y):
        r"""__call__(InterDenom2D self, double x, double y) -> double"""
        return _TMQGP.InterDenom2D___call__(self, x, y)

    def __getstate__(self):
        x = list(self.x)
        y = list(self.y)
        z = list(self.z)
        z2 = list(self.z2)
        what = self.what
        return x, y, z, z2, what

    def __setstate__(self, state):
        _x, _y, _z, _z2, _what = state
        x = np.array(_x)
        y = np.array(_y)
        z = np.array(_z).reshape(len(y), len(x))
        z2 = np.array(_z2).reshape(len(y), len(x))
        what = _what
        self.__init__(x, y, z, z2, what)


# Register InterDenom2D in _TMQGP:
_TMQGP.InterDenom2D_swigregister(InterDenom2D)
class PoleInterpolator(InterDenom2D):
    r"""Proxy of C++ PoleInterpolator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PoleInterpolator self) -> PoleInterpolator
        __init__(PoleInterpolator self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what) -> PoleInterpolator
        """
        _TMQGP.PoleInterpolator_swiginit(self, _TMQGP.new_PoleInterpolator(*args))
    iPole = property(_TMQGP.PoleInterpolator_iPole_get, _TMQGP.PoleInterpolator_iPole_set, doc=r"""iPole : p.Interpolator""")
    iWidth = property(_TMQGP.PoleInterpolator_iWidth_get, _TMQGP.PoleInterpolator_iWidth_set, doc=r"""iWidth : p.Interpolator""")
    q = property(_TMQGP.PoleInterpolator_q_get, _TMQGP.PoleInterpolator_q_set, doc=r"""q : std::vector<(double)>""")
    pole = property(_TMQGP.PoleInterpolator_pole_get, _TMQGP.PoleInterpolator_pole_set, doc=r"""pole : std::vector<(double)>""")
    width = property(_TMQGP.PoleInterpolator_width_get, _TMQGP.PoleInterpolator_width_set, doc=r"""width : std::vector<(double)>""")
    what = property(_TMQGP.PoleInterpolator_what_get, _TMQGP.PoleInterpolator_what_set, doc=r"""what : std::string""")
    __swig_destroy__ = _TMQGP.delete_PoleInterpolator

    def __getstate__(self):
        x = list(self.x)
        y = list(self.y)
        z = list(self.z)
        z2 = list(self.z2)
        q = list(self.q)
        pole = list(self.pole)
        width = list(self.width)
        what = self.what

        return x, y, z, z2, q, pole, width, what

    def __setstate__(self, state):
        _x, _y, _z, _z2, _q, _pole, _width, _what = state
        x = np.array(_x)
        y = np.array(_y)
        z = np.array(_z).reshape(len(y), len(x))
        z2 = np.array(_z2).reshape(len(y), len(x))
        q = np.array(_q)
        pole = np.array(_pole)
        width = np.array(_width)
        what = _what

        self.__init__(x, y, z, z2, q, pole, width, what)


# Register PoleInterpolator in _TMQGP:
_TMQGP.PoleInterpolator_swigregister(PoleInterpolator)
class PoleInterpolatorLog(PoleInterpolator):
    r"""Proxy of C++ PoleInterpolatorLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PoleInterpolatorLog self) -> PoleInterpolatorLog
        __init__(PoleInterpolatorLog self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what) -> PoleInterpolatorLog
        """
        _TMQGP.PoleInterpolatorLog_swiginit(self, _TMQGP.new_PoleInterpolatorLog(*args))

    def real(self, x, y):
        r"""real(PoleInterpolatorLog self, double x, double y) -> double"""
        return _TMQGP.PoleInterpolatorLog_real(self, x, y)

    def imag(self, x, y):
        r"""imag(PoleInterpolatorLog self, double x, double y) -> double"""
        return _TMQGP.PoleInterpolatorLog_imag(self, x, y)
    __swig_destroy__ = _TMQGP.delete_PoleInterpolatorLog

    def __call__(self, x, y):
        r"""__call__(PoleInterpolatorLog self, double x, double y) -> double"""
        return _TMQGP.PoleInterpolatorLog___call__(self, x, y)

# Register PoleInterpolatorLog in _TMQGP:
_TMQGP.PoleInterpolatorLog_swigregister(PoleInterpolatorLog)
class PoleInterpolatorQ(InterDenom2D):
    r"""Proxy of C++ PoleInterpolatorQ class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(PoleInterpolatorQ self) -> PoleInterpolatorQ
        __init__(PoleInterpolatorQ self, double * x, double * y, double * ReZ2, double * ImZ2, double * e, double * pole, double * width, std::string what) -> PoleInterpolatorQ
        """
        _TMQGP.PoleInterpolatorQ_swiginit(self, _TMQGP.new_PoleInterpolatorQ(*args))
    iPole = property(_TMQGP.PoleInterpolatorQ_iPole_get, _TMQGP.PoleInterpolatorQ_iPole_set, doc=r"""iPole : p.Interpolator""")
    iWidth = property(_TMQGP.PoleInterpolatorQ_iWidth_get, _TMQGP.PoleInterpolatorQ_iWidth_set, doc=r"""iWidth : p.Interpolator""")
    q = property(_TMQGP.PoleInterpolatorQ_q_get, _TMQGP.PoleInterpolatorQ_q_set, doc=r"""q : std::vector<(double)>""")
    pole = property(_TMQGP.PoleInterpolatorQ_pole_get, _TMQGP.PoleInterpolatorQ_pole_set, doc=r"""pole : std::vector<(double)>""")
    width = property(_TMQGP.PoleInterpolatorQ_width_get, _TMQGP.PoleInterpolatorQ_width_set, doc=r"""width : std::vector<(double)>""")
    what = property(_TMQGP.PoleInterpolatorQ_what_get, _TMQGP.PoleInterpolatorQ_what_set, doc=r"""what : std::string""")
    __swig_destroy__ = _TMQGP.delete_PoleInterpolatorQ

# Register PoleInterpolatorQ in _TMQGP:
_TMQGP.PoleInterpolatorQ_swigregister(PoleInterpolatorQ)
class GFInterpolator(PoleInterpolator):
    r"""Proxy of C++ GFInterpolator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GFInterpolator self) -> GFInterpolator
        __init__(GFInterpolator self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what, double m, double mu) -> GFInterpolator
        """
        _TMQGP.GFInterpolator_swiginit(self, _TMQGP.new_GFInterpolator(*args))
    __swig_destroy__ = _TMQGP.delete_GFInterpolator
    m = property(_TMQGP.GFInterpolator_m_get, _TMQGP.GFInterpolator_m_set, doc=r"""m : double""")
    mu = property(_TMQGP.GFInterpolator_mu_get, _TMQGP.GFInterpolator_mu_set, doc=r"""mu : double""")

    def real(self, x, y):
        r"""real(GFInterpolator self, double x, double y) -> double"""
        return _TMQGP.GFInterpolator_real(self, x, y)

    def imag(self, x, y):
        r"""imag(GFInterpolator self, double x, double y) -> double"""
        return _TMQGP.GFInterpolator_imag(self, x, y)

    def __call__(self, x, y):
        r"""__call__(GFInterpolator self, double x, double y) -> double"""
        return _TMQGP.GFInterpolator___call__(self, x, y)

    def __getstate__(self):
        x = list(self.x)
        y = list(self.y)
        z = list(self.z)
        z2 = list(self.z2)
        m = self.m
        mu = self.mu
        q = list(self.q)
        pole = list(self.pole)
        width = list(self.width)
        what = self.what

        return x, y, z, z2, m, mu, q, pole, width, what

    def __setstate__(self, state):
        _x, _y, _z, _z2, _m, _mu, _q, _pole, _width, _what = state
        x = np.array(_x)
        y = np.array(_y)
        z = np.array(_z).reshape(len(y), len(x))
        z2 = np.array(_z2).reshape(len(y), len(x))
        q = np.array(_q)
        pole = np.array(_pole)
        width = np.array(_width)
        m = _m
        mu = _mu
        what = _what

        self.__init__(x, y, z, z2, q, pole, width, what, m, mu)


# Register GFInterpolator in _TMQGP:
_TMQGP.GFInterpolator_swigregister(GFInterpolator)
class GFInterpolatorLog(GFInterpolator):
    r"""Proxy of C++ GFInterpolatorLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GFInterpolatorLog self) -> GFInterpolatorLog
        __init__(GFInterpolatorLog self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what, double m, double mu) -> GFInterpolatorLog
        """
        _TMQGP.GFInterpolatorLog_swiginit(self, _TMQGP.new_GFInterpolatorLog(*args))

    def real(self, x, y):
        r"""real(GFInterpolatorLog self, double x, double y) -> double"""
        return _TMQGP.GFInterpolatorLog_real(self, x, y)

    def imag(self, x, y):
        r"""imag(GFInterpolatorLog self, double x, double y) -> double"""
        return _TMQGP.GFInterpolatorLog_imag(self, x, y)
    __swig_destroy__ = _TMQGP.delete_GFInterpolatorLog

# Register GFInterpolatorLog in _TMQGP:
_TMQGP.GFInterpolatorLog_swigregister(GFInterpolatorLog)
class GFInterpolatorLogMu6(GFInterpolatorLog):
    r"""Proxy of C++ GFInterpolatorLogMu6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GFInterpolatorLogMu6 self) -> GFInterpolatorLogMu6
        __init__(GFInterpolatorLogMu6 self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what, double m, double mu) -> GFInterpolatorLogMu6
        """
        _TMQGP.GFInterpolatorLogMu6_swiginit(self, _TMQGP.new_GFInterpolatorLogMu6(*args))

    def __call__(self, x, y):
        r"""__call__(GFInterpolatorLogMu6 self, double x, double y) -> double"""
        return _TMQGP.GFInterpolatorLogMu6___call__(self, x, y)
    __swig_destroy__ = _TMQGP.delete_GFInterpolatorLogMu6

# Register GFInterpolatorLogMu6 in _TMQGP:
_TMQGP.GFInterpolatorLogMu6_swigregister(GFInterpolatorLogMu6)
class GFInterpolator_NoPole(InterDenom2D):
    r"""Proxy of C++ GFInterpolator_NoPole class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(GFInterpolator_NoPole self) -> GFInterpolator_NoPole
        __init__(GFInterpolator_NoPole self, double * x, double * y, double * ReZ2, double * ImZ2, std::string what, double m, double mu) -> GFInterpolator_NoPole
        """
        _TMQGP.GFInterpolator_NoPole_swiginit(self, _TMQGP.new_GFInterpolator_NoPole(*args))
    __swig_destroy__ = _TMQGP.delete_GFInterpolator_NoPole
    m = property(_TMQGP.GFInterpolator_NoPole_m_get, _TMQGP.GFInterpolator_NoPole_m_set, doc=r"""m : double""")
    mu = property(_TMQGP.GFInterpolator_NoPole_mu_get, _TMQGP.GFInterpolator_NoPole_mu_set, doc=r"""mu : double""")

    def __call__(self, x, y):
        r"""__call__(GFInterpolator_NoPole self, double x, double y) -> double"""
        return _TMQGP.GFInterpolator_NoPole___call__(self, x, y)

    def real(self, x, y):
        r"""real(GFInterpolator_NoPole self, double x, double y) -> double"""
        return _TMQGP.GFInterpolator_NoPole_real(self, x, y)

    def imag(self, x, y):
        r"""imag(GFInterpolator_NoPole self, double x, double y) -> double"""
        return _TMQGP.GFInterpolator_NoPole_imag(self, x, y)

# Register GFInterpolator_NoPole in _TMQGP:
_TMQGP.GFInterpolator_NoPole_swigregister(GFInterpolator_NoPole)
class RhoInterpolator(GFInterpolator):
    r"""Proxy of C++ RhoInterpolator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RhoInterpolator self) -> RhoInterpolator
        __init__(RhoInterpolator self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what, double m, double mu) -> RhoInterpolator
        """
        _TMQGP.RhoInterpolator_swiginit(self, _TMQGP.new_RhoInterpolator(*args))

    def __call__(self, x, y):
        r"""__call__(RhoInterpolator self, double x, double y) -> double"""
        return _TMQGP.RhoInterpolator___call__(self, x, y)

    def __getstate__(self):
        x = list(self.x)
        y = list(self.y)
        z = list(self.z)
        z2 = list(self.z2)
        m = self.m
        mu = self.mu
        q = list(self.q)
        pole = list(self.pole)
        width = list(self.width)
        what = self.what

        return x, y, z, z2, m, mu, q, pole, width, what

    def __setstate__(self, state):
        _x, _y, _z, _z2, _m, _mu, _q, _pole, _width, _what = state
        x = np.array(_x)
        y = np.array(_y)
        z = np.array(_z).reshape(len(y), len(x))
        z2 = np.array(_z2).reshape(len(y), len(x))
        q = np.array(_q)
        pole = np.array(_pole)
        width = np.array(_width)
        m = _m
        mu = _mu
        what = _what
        self.__init__(x, y, z, z2, q, pole, width, what, m, mu)

    __swig_destroy__ = _TMQGP.delete_RhoInterpolator

# Register RhoInterpolator in _TMQGP:
_TMQGP.RhoInterpolator_swigregister(RhoInterpolator)
class RhoInterpolatorLog(GFInterpolatorLog):
    r"""Proxy of C++ RhoInterpolatorLog class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RhoInterpolatorLog self) -> RhoInterpolatorLog
        __init__(RhoInterpolatorLog self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what, double m, double mu) -> RhoInterpolatorLog
        """
        _TMQGP.RhoInterpolatorLog_swiginit(self, _TMQGP.new_RhoInterpolatorLog(*args))

    def __call__(self, x, y):
        r"""__call__(RhoInterpolatorLog self, double x, double y) -> double"""
        return _TMQGP.RhoInterpolatorLog___call__(self, x, y)
    __swig_destroy__ = _TMQGP.delete_RhoInterpolatorLog

# Register RhoInterpolatorLog in _TMQGP:
_TMQGP.RhoInterpolatorLog_swigregister(RhoInterpolatorLog)
class RhoInterpolatorLogMu6(RhoInterpolatorLog):
    r"""Proxy of C++ RhoInterpolatorLogMu6 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(RhoInterpolatorLogMu6 self) -> RhoInterpolatorLogMu6
        __init__(RhoInterpolatorLogMu6 self, double * x, double * y, double * ReZ2, double * ImZ2, double * q, double * pole, double * width, std::string what, double m, double mu) -> RhoInterpolatorLogMu6
        """
        _TMQGP.RhoInterpolatorLogMu6_swiginit(self, _TMQGP.new_RhoInterpolatorLogMu6(*args))

    def __call__(self, x, y):
        r"""__call__(RhoInterpolatorLogMu6 self, double x, double y) -> double"""
        return _TMQGP.RhoInterpolatorLogMu6___call__(self, x, y)
    __swig_destroy__ = _TMQGP.delete_RhoInterpolatorLogMu6

# Register RhoInterpolatorLogMu6 in _TMQGP:
_TMQGP.RhoInterpolatorLogMu6_swigregister(RhoInterpolatorLogMu6)
class XInterpolator(object):
    r"""Proxy of C++ XInterpolator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(XInterpolator self) -> XInterpolator
        __init__(XInterpolator self, Interpolator ReX00, Interpolator ReX01, Interpolator ReX10, Interpolator ReX11, Interpolator ImX00, Interpolator ImX01, Interpolator ImX10, Interpolator ImX11) -> XInterpolator
        """
        _TMQGP.XInterpolator_swiginit(self, _TMQGP.new_XInterpolator(*args))
    ReX00 = property(_TMQGP.XInterpolator_ReX00_get, _TMQGP.XInterpolator_ReX00_set, doc=r"""ReX00 : p.Interpolator""")
    ReX01 = property(_TMQGP.XInterpolator_ReX01_get, _TMQGP.XInterpolator_ReX01_set, doc=r"""ReX01 : p.Interpolator""")
    ReX10 = property(_TMQGP.XInterpolator_ReX10_get, _TMQGP.XInterpolator_ReX10_set, doc=r"""ReX10 : p.Interpolator""")
    ReX11 = property(_TMQGP.XInterpolator_ReX11_get, _TMQGP.XInterpolator_ReX11_set, doc=r"""ReX11 : p.Interpolator""")
    ImX00 = property(_TMQGP.XInterpolator_ImX00_get, _TMQGP.XInterpolator_ImX00_set, doc=r"""ImX00 : p.Interpolator""")
    ImX01 = property(_TMQGP.XInterpolator_ImX01_get, _TMQGP.XInterpolator_ImX01_set, doc=r"""ImX01 : p.Interpolator""")
    ImX10 = property(_TMQGP.XInterpolator_ImX10_get, _TMQGP.XInterpolator_ImX10_set, doc=r"""ImX10 : p.Interpolator""")
    ImX11 = property(_TMQGP.XInterpolator_ImX11_get, _TMQGP.XInterpolator_ImX11_set, doc=r"""ImX11 : p.Interpolator""")
    __swig_destroy__ = _TMQGP.delete_XInterpolator

    def __call__(self, i, j, x):
        r"""__call__(XInterpolator self, int i, int j, double x) -> std::complex< double >"""
        return _TMQGP.XInterpolator___call__(self, i, j, x)

# Register XInterpolator in _TMQGP:
_TMQGP.XInterpolator_swigregister(XInterpolator)
class XInterpolator_P(object):
    r"""Proxy of C++ XInterpolator_P class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(XInterpolator_P self) -> XInterpolator_P
        __init__(XInterpolator_P self, Interpolator2D ReX00, Interpolator2D ReX01, Interpolator2D ReX10, Interpolator2D ReX11, Interpolator2D ImX00, Interpolator2D ImX01, Interpolator2D ImX10, Interpolator2D ImX11) -> XInterpolator_P
        """
        _TMQGP.XInterpolator_P_swiginit(self, _TMQGP.new_XInterpolator_P(*args))
    ReX00 = property(_TMQGP.XInterpolator_P_ReX00_get, _TMQGP.XInterpolator_P_ReX00_set, doc=r"""ReX00 : p.Interpolator2D""")
    ReX01 = property(_TMQGP.XInterpolator_P_ReX01_get, _TMQGP.XInterpolator_P_ReX01_set, doc=r"""ReX01 : p.Interpolator2D""")
    ReX10 = property(_TMQGP.XInterpolator_P_ReX10_get, _TMQGP.XInterpolator_P_ReX10_set, doc=r"""ReX10 : p.Interpolator2D""")
    ReX11 = property(_TMQGP.XInterpolator_P_ReX11_get, _TMQGP.XInterpolator_P_ReX11_set, doc=r"""ReX11 : p.Interpolator2D""")
    ImX00 = property(_TMQGP.XInterpolator_P_ImX00_get, _TMQGP.XInterpolator_P_ImX00_set, doc=r"""ImX00 : p.Interpolator2D""")
    ImX01 = property(_TMQGP.XInterpolator_P_ImX01_get, _TMQGP.XInterpolator_P_ImX01_set, doc=r"""ImX01 : p.Interpolator2D""")
    ImX10 = property(_TMQGP.XInterpolator_P_ImX10_get, _TMQGP.XInterpolator_P_ImX10_set, doc=r"""ImX10 : p.Interpolator2D""")
    ImX11 = property(_TMQGP.XInterpolator_P_ImX11_get, _TMQGP.XInterpolator_P_ImX11_set, doc=r"""ImX11 : p.Interpolator2D""")
    __swig_destroy__ = _TMQGP.delete_XInterpolator_P
    old_P = property(_TMQGP.XInterpolator_P_old_P_get, _TMQGP.XInterpolator_P_old_P_set, doc=r"""old_P : bool""")

    def __call__(self, i, j, P, E):
        r"""__call__(XInterpolator_P self, int i, int j, double P, double E) -> std::complex< double >"""
        return _TMQGP.XInterpolator_P___call__(self, i, j, P, E)

# Register XInterpolator_P in _TMQGP:
_TMQGP.XInterpolator_P_swigregister(XInterpolator_P)

def integrate_x(a, b):
    r"""integrate_x(double a, double b) -> double"""
    return _TMQGP.integrate_x(a, b)

def integrate_x_num(a, b):
    r"""integrate_x_num(double a, double b) -> double"""
    return _TMQGP.integrate_x_num(a, b)

def heaviside(x):
    r"""heaviside(double x) -> double"""
    return _TMQGP.heaviside(x)

def n(E, T):
    r"""n(double E, double T) -> double"""
    return _TMQGP.n(E, T)

def ImPi_Pion(w, q, T, p, m, mu_star, Delta, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""ImPi_Pion(double w, double q, double T, double p, double m, double mu_star, double Delta, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.ImPi_Pion(w, q, T, p, m, mu_star, Delta, thermal_cutoff, Nf, Lambda_CutOff)

def ImPi_Diquark(w, q, T, p, m, mu_star, Delta, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""ImPi_Diquark(double w, double q, double T, double p, double m, double mu_star, double Delta, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.ImPi_Diquark(w, q, T, p, m, mu_star, Delta, thermal_cutoff, Nf, Lambda_CutOff)

def ImPi_AntiDiquark(w, q, T, p, m, mu_star, Delta, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""ImPi_AntiDiquark(double w, double q, double T, double p, double m, double mu_star, double Delta, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.ImPi_AntiDiquark(w, q, T, p, m, mu_star, Delta, thermal_cutoff, Nf, Lambda_CutOff)

def RePi_Pion(w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""RePi_Pion(double w, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.RePi_Pion(w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def RePi_Diquark(w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""RePi_Diquark(double w, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.RePi_Diquark(w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def RePi_AntiDiquark(w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""RePi_AntiDiquark(double w, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.RePi_AntiDiquark(w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def phaseshift_Diquark(Gd, w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""phaseshift_Diquark(double Gd, double w, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.phaseshift_Diquark(Gd, w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def phaseshift_approx_Diquark(Gd, w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""phaseshift_approx_Diquark(double Gd, double w, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.phaseshift_approx_Diquark(Gd, w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def phaseshift_AntiDiquark(Gd, w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""phaseshift_AntiDiquark(double Gd, double w, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.phaseshift_AntiDiquark(Gd, w, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def Pressure_Integrand_Diquark(Gd, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""Pressure_Integrand_Diquark(double Gd, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.Pressure_Integrand_Diquark(Gd, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def pressure_diquark(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""pressure_diquark(double Gd, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.pressure_diquark(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def Pressure_Integrand_Diquark_QP(Gd, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""Pressure_Integrand_Diquark_QP(double Gd, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.Pressure_Integrand_Diquark_QP(Gd, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def pressure_diquark_Test_QP(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""pressure_diquark_Test_QP(double Gd, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.pressure_diquark_Test_QP(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def Pressure_Integrand_Diquark_LD(Gd, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""Pressure_Integrand_Diquark_LD(double Gd, double q, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.Pressure_Integrand_Diquark_LD(Gd, q, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)

def pressure_diquark_Test_LD(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, landau_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""pressure_diquark_Test_LD(double Gd, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double landau_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.pressure_diquark_Test_LD(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, landau_cutoff, Nf, Lambda_CutOff)

def pressure_antidiquark(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf=2.0, Lambda_CutOff=651.0):
    r"""pressure_antidiquark(double Gd, double T, double mu, double m, double mu_star, double delta, double m0, double mu_star0, double delta0, double thermal_cutoff, double Nf=2.0, double Lambda_CutOff=651.0) -> double"""
    return _TMQGP.pressure_antidiquark(Gd, T, mu, m, mu_star, delta, m0, mu_star0, delta0, thermal_cutoff, Nf, Lambda_CutOff)
class pair_dd(object):
    r"""Proxy of C++ std::pair< double,double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(pair_dd self) -> pair_dd
        __init__(pair_dd self, double first, double second) -> pair_dd
        __init__(pair_dd self, pair_dd other) -> pair_dd
        """
        _TMQGP.pair_dd_swiginit(self, _TMQGP.new_pair_dd(*args))
    first = property(_TMQGP.pair_dd_first_get, _TMQGP.pair_dd_first_set, doc=r"""first : double""")
    second = property(_TMQGP.pair_dd_second_get, _TMQGP.pair_dd_second_set, doc=r"""second : double""")
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _TMQGP.delete_pair_dd

# Register pair_dd in _TMQGP:
_TMQGP.pair_dd_swigregister(pair_dd)
cvar = _TMQGP.cvar
pi = cvar.pi


